{"id":1000012,"fid":"面试题 10.01","name":"合并排序的数组","slug":"sorted-merge-lcci","link":"https://leetcode.cn/problems/sorted-merge-lcci/description/","percent":56.12971916056195,"level":"Easy","category":"LCCI","en_name":"Sorted Merge LCCI","cn_name":"合并排序的数组","totalAC":"83.9K","totalSubmit":"149.5K","likes":176,"dislikes":0,"desc":"<p>给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。</p>\n\n<p>初始化&nbsp;A 和 B 的元素数量分别为&nbsp;<em>m</em> 和 <em>n</em>。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong>\nA = [1,2,3,0,0,0], m = 3\nB = [2,5,6],       n = 3\n\n<strong>输出:</strong>&nbsp;[1,2,2,3,5,6]</pre>\n\n<p><strong>说明:</strong></p>\n\n<ul>\n\t<li><code>A.length == n + m</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    void merge(vector<int>& A, int m, vector<int>& B, int n) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public void merge(int[] A, int m, int[] B, int n) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def merge(self, A, m, B, n):\n        \"\"\"\n        :type A: List[int]\n        :type m: int\n        :type B: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify A in-place instead.\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def merge(self, A: List[int], m: int, B: List[int], n: int) -> None:\n        \"\"\"\n        Do not return anything, modify A in-place instead.\n        \"\"\""},{"value":"c","text":"C","defaultCode":"\n\nvoid merge(int* A, int ASize, int m, int* B, int BSize, int n){\n\n}\n"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public void Merge(int[] A, int m, int[] B, int n) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number} m\n * @param {number[]} B\n * @param {number} n\n * @return {void} Do not return anything, modify A in-place instead.\n */\nvar merge = function(A, m, B, n) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n Do not return anything, modify A in-place instead.\n */\nfunction merge(A: number[], m: number, B: number[], n: number): void {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $A\n     * @param Integer $m\n     * @param Integer[] $B\n     * @param Integer $n\n     * @return NULL\n     */\n    function merge(&$A, $m, $B, $n) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func merge(_ A: inout [Int], _ m: Int, _ B: [Int], _ n: Int) {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun merge(A: IntArray, m: Int, B: IntArray, n: Int): Unit {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  void merge(List<int> A, int m, List<int> B, int n) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func merge(A []int, m int, B []int, n int)  {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer} m\n# @param {Integer[]} b\n# @param {Integer} n\n# @return {Void} Do not return anything, modify A in-place instead.\ndef merge(a, m, b, n)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def merge(A: Array[Int], m: Int, B: Array[Int], n: Int): Unit = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn merge(a: &mut Vec<i32>, m: i32, b: &mut Vec<i32>, n: i32) {\n\n    }\n}"}],"testcase":"[1,2,3,0,0,0]\n3\n[2,5,6]\n3","testable":true,"templateMeta":{"name":"merge","params":[{"name":"A","type":"integer[]","implicitsizeparam":false},{"name":"m","type":"integer"},{"name":"B","type":"integer[]","implicitsizeparam":false},{"name":"n","type":"integer"}],"return":{"type":"void"},"output":{"paramindex":0}}}