{"id":1217,"fid":"1122","name":"数组的相对排序","slug":"relative-sort-array","link":"https://leetcode.cn/problems/relative-sort-array/description/","percent":70.80471195644111,"level":"Easy","category":"algorithms","en_name":"Relative Sort Array","cn_name":"数组的相对排序","totalAC":"95.6K","totalSubmit":"135K","likes":295,"dislikes":0,"desc":"<p>给你两个数组，<code>arr1</code> 和&nbsp;<code>arr2</code>，<code>arr2</code>&nbsp;中的元素各不相同，<code>arr2</code> 中的每个元素都出现在&nbsp;<code>arr1</code>&nbsp;中。</p>\n\n<p>对 <code>arr1</code>&nbsp;中的元素进行排序，使 <code>arr1</code> 中项的相对顺序和&nbsp;<code>arr2</code>&nbsp;中的相对顺序相同。未在&nbsp;<code>arr2</code>&nbsp;中出现过的元素需要按照升序放在&nbsp;<code>arr1</code>&nbsp;的末尾。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n<strong>输出：</strong>[2,2,2,1,4,3,3,9,6,7,19]\n</pre>\n\n<p><strong>示例 &nbsp;2:</strong></p>\n\n<pre>\n<strong>输入：</strong>arr1 = [28,6,22,8,44,17], arr2 = [22,28,8,6]\n<strong>输出：</strong>[22,28,8,6,17,44]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr1.length, arr2.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= arr1[i], arr2[i] &lt;= 1000</code></li>\n\t<li><code>arr2</code>&nbsp;中的元素&nbsp;<code>arr2[i]</code>&nbsp;&nbsp;<strong>各不相同</strong>&nbsp;</li>\n\t<li><code>arr2</code> 中的每个元素&nbsp;<code>arr2[i]</code>&nbsp;都出现在&nbsp;<code>arr1</code>&nbsp;中</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> relativeSortArray(vector<int>& arr1, vector<int>& arr2) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] relativeSortArray(int[] arr1, int[] arr2) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def relativeSortArray(self, arr1, arr2):\n        \"\"\"\n        :type arr1: List[int]\n        :type arr2: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def relativeSortArray(self, arr1: List[int], arr2: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* relativeSortArray(int* arr1, int arr1Size, int* arr2, int arr2Size, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] RelativeSortArray(int[] arr1, int[] arr2) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} arr1\n * @param {number[]} arr2\n * @return {number[]}\n */\nvar relativeSortArray = function(arr1, arr2) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function relativeSortArray(arr1: number[], arr2: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $arr1\n     * @param Integer[] $arr2\n     * @return Integer[]\n     */\n    function relativeSortArray($arr1, $arr2) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func relativeSortArray(_ arr1: [Int], _ arr2: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun relativeSortArray(arr1: IntArray, arr2: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> relativeSortArray(List<int> arr1, List<int> arr2) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func relativeSortArray(arr1 []int, arr2 []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} arr1\n# @param {Integer[]} arr2\n# @return {Integer[]}\ndef relative_sort_array(arr1, arr2)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def relativeSortArray(arr1: Array[Int], arr2: Array[Int]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn relative_sort_array(arr1: Vec<i32>, arr2: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (relative-sort-array arr1 arr2)\n  (-> (listof exact-integer?) (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec relative_sort_array(Arr1 :: [integer()], Arr2 :: [integer()]) -> [integer()].\nrelative_sort_array(Arr1, Arr2) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec relative_sort_array(arr1 :: [integer], arr2 :: [integer]) :: [integer]\n  def relative_sort_array(arr1, arr2) do\n    \n  end\nend"}],"testcase":"[2,3,1,3,2,4,6,7,9,2,19]\n[2,1,4,3,9,6]","testable":true,"templateMeta":{"name":"relativeSortArray","params":[{"name":"arr1","type":"integer[]"},{"type":"integer[]","name":"arr2"}],"return":{"type":"integer[]"}}}