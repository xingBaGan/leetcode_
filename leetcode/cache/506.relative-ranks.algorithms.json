{"id":506,"fid":"506","name":"相对名次","slug":"relative-ranks","link":"https://leetcode.cn/problems/relative-ranks/description/","percent":65.67075425861331,"level":"Easy","category":"algorithms","en_name":"Relative Ranks","cn_name":"相对名次","totalAC":"90.7K","totalSubmit":"138.1K","likes":243,"dislikes":0,"desc":"<p>给你一个长度为 <code>n</code> 的整数数组 <code>score</code> ，其中 <code>score[i]</code> 是第 <code>i</code> 位运动员在比赛中的得分。所有得分都 <strong>互不相同</strong> 。</p>\n\n<p>运动员将根据得分 <strong>决定名次</strong> ，其中名次第 <code>1</code> 的运动员得分最高，名次第 <code>2</code> 的运动员得分第 <code>2</code> 高，依此类推。运动员的名次决定了他们的获奖情况：</p>\n\n<ul>\n\t<li>名次第 <code>1</code> 的运动员获金牌 <code>\"Gold Medal\"</code> 。</li>\n\t<li>名次第 <code>2</code> 的运动员获银牌 <code>\"Silver Medal\"</code> 。</li>\n\t<li>名次第 <code>3</code> 的运动员获铜牌 <code>\"Bronze Medal\"</code> 。</li>\n\t<li>从名次第 <code>4</code> 到第 <code>n</code> 的运动员，只能获得他们的名次编号（即，名次第 <code>x</code> 的运动员获得编号 <code>\"x\"</code>）。</li>\n</ul>\n\n<p>使用长度为 <code>n</code> 的数组 <code>answer</code> 返回获奖，其中 <code>answer[i]</code> 是第 <code>i</code> 位运动员的获奖情况。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>score = [5,4,3,2,1]\n<strong>输出：</strong>[\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n<strong>解释：</strong>名次为 [1<sup>st</sup>, 2<sup>nd</sup>, 3<sup>rd</sup>, 4<sup>th</sup>, 5<sup>th</sup>] 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>score = [10,3,8,9,4]\n<strong>输出：</strong>[\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\n<strong>解释：</strong>名次为 [1<sup>st</sup>, 5<sup>th</sup>, 3<sup>rd</sup>, 2<sup>nd</sup>, 4<sup>th</sup>] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == score.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= score[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>score</code> 中的所有值 <strong>互不相同</strong></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& score) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String[] findRelativeRanks(int[] score) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findRelativeRanks(self, score: List[int]) -> List[str]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findRelativeRanks(int* score, int scoreSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string[] FindRelativeRanks(int[] score) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} score\n * @return {string[]}\n */\nvar findRelativeRanks = function(score) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findRelativeRanks(score: number[]): string[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $score\n     * @return String[]\n     */\n    function findRelativeRanks($score) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findRelativeRanks(_ score: [Int]) -> [String] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findRelativeRanks(score: IntArray): Array<String> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<String> findRelativeRanks(List<int> score) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findRelativeRanks(score []int) []string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} score\n# @return {String[]}\ndef find_relative_ranks(score)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findRelativeRanks(score: Array[Int]): Array[String] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_relative_ranks(score: Vec<i32>) -> Vec<String> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-relative-ranks score)\n  (-> (listof exact-integer?) (listof string?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_relative_ranks(Score :: [integer()]) -> [unicode:unicode_binary()].\nfind_relative_ranks(Score) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_relative_ranks(score :: [integer]) :: [String.t]\n  def find_relative_ranks(score) do\n    \n  end\nend"}],"testcase":"[5,4,3,2,1]","testable":true,"templateMeta":{"name":"findRelativeRanks","params":[{"name":"score","type":"integer[]"}],"return":{"type":"string[]"}}}